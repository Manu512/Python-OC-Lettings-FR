version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  heroku: circleci/heroku@1.2.6

executors:
  my-machine:
    machine: true
    working_directory: /tmp/workspace

workflows:
  master_commit:
    jobs:
      - build-and-test:
          filters:
            branches:
              only:
                - master
      - build-push-docker:
          requires:
            - build-and-test
      - heroku/deploy-via-git:
            app-name: $HEROKU_APP_NAME
            force: true
            pre-steps:
              - run: heroku config:set BUILD_NUMBER=$CIRCLE_BUILD_NUM -a $APP_NAME
              - run: heroku config:set SECRET_KEY=SECRET_KEY -a $APP_NAME
              - run: heroku config:set DNS_SENTRY=SENTRY_DSN -a $APP_NAME
              - run: heroku stack:set heroku-20 -a $APP_NAME
  dev_commit:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore:
                - master
  dev-built-and-deploy:
    jobs:
      - approve-build:
          type: approval
          filters:
            branches:
              ignore:
                - master
      - build-push-docker:
          requires:
            - approve-build
      - heroku/deploy-via-git:
            app-name: $HEROKU_APP_NAME
            force: true
            pre-steps:
              - run: heroku config:set BUILD_NUMBER=$CIRCLE_BUILD_NUM -a $APP_NAME
              - run: heroku config:set SECRET_KEY=SECRET_KEY -a $APP_NAME
              - run: heroku config:set DNS_SENTRY=SENTRY_DSN -a $APP_NAME
              - run: heroku stack:set heroku-20 -a $APP_NAME
#      - deploy:
#          requires:
#            - build-push-docker

jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.9.5
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run pytest
          # This assumes pytest is installed via the install-package step above
          command: pytest

      - run:
          name: linting PEP8
          command: flake8

      - when:
          condition:
            equal: [ master , << pipeline.git.branch >> ]
          steps:
            - run: echo "Branche Master ==> On va conteneuriser et envoyer vers DockerHub"

  build-push-docker:
    executor: my-machine
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: docker build -t $DOCKER_USER/oc-lettings:$CIRCLE_SHA1 .
      - run:
          name: Push Docker Image
          command: |
                    echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
                    docker tag $DOCKER_USER/oc-lettings:$CIRCLE_SHA1 $DOCKER_USER/oc-lettings:lastest
                    docker push $DOCKER_USER/oc-lettings:$CIRCLE_SHA1
                    docker push $DOCKER_USER/oc-lettings:lastest

#  deploy:
#    executor: heroku/default
#    steps:
#      - checkout
#      - heroku/install
#      - run: heroku maintenance:on --app $APP_NAME
#      - run: heroku config:set BUILD_NUMBER=$CIRCLE_BUILD_NUM -a $APP_NAME
#      - run: heroku config:set SECRET_KEY=SECRET_KEY -a $APP_NAME
#      - run: heroku config:set DNS_SENTRY=SENTRY_DSN -a $APP_NAME
#      - run: heroku stack:set heroku-20 -a $APP_NAME
#      - run: heroku maintenance:off --app $HEROKU_APP_NAME
#      - heroku/deploy-via-git:
#          app-name: $HEROKU_APP_NAME
#          force: true
#


