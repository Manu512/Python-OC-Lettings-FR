version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

workflows:
  new_commit:
    jobs:
      - build-and-test
      - deploy-docker-hub:
          requires:
            - build-and-test
#          filters:
#            branches:
#              only:
#                - master

jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.9.5
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run pytest
          # This assumes pytest is installed via the install-package step above
          command: pytest

      - run:
          name: linting PEP8
          command: flake8

      - when:
          condition:
            equal: [  master , << pipeline.git.branch >> ]
          steps:
            - run: echo "Branche Master ==> On va conteneuriser et envoyer vers DockerHub"

  deploy-docker-hub:
    docker:
      - image: cimg/python:3.9.5
        auth:
          username: $DOCKER_USER
          password: $DOCKER_TOKEN
    steps:
      - checkout
      - setup_remote_docker:
            version: 19.03.13
            docker_layer_caching: true
      - run:
          name: Build and push image to Docker_hub
          command: |
            docker build -t $DOCKER_USER/oc-lettings:$CIRCLE_SHA1 .
            docker push $DOCKER_USER/oc-lettings:$CIRCLE_SHA1